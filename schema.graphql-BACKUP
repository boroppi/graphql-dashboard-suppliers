# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"supplier_collections\""
    delete_supplier_collections(
        "filter the rows which have to be deleted"
        where: supplier_collections_bool_exp!
    ): supplier_collections_mutation_response
    "delete data from the table: \"suppliers\""
    delete_suppliers(
        "filter the rows which have to be deleted"
        where: suppliers_bool_exp!
    ): suppliers_mutation_response
    "insert data into the table: \"supplier_collections\""
    insert_supplier_collections(
        "the rows to be inserted"
        objects: [supplier_collections_insert_input!]!,
        "on conflict condition"
        on_conflict: supplier_collections_on_conflict
    ): supplier_collections_mutation_response
    "insert data into the table: \"suppliers\""
    insert_suppliers(
        "the rows to be inserted"
        objects: [suppliers_insert_input!]!,
        "on conflict condition"
        on_conflict: suppliers_on_conflict
    ): suppliers_mutation_response
    "update data of the table: \"supplier_collections\""
    update_supplier_collections(
        "increments the integer columns with given value of the filtered values"
        _inc: supplier_collections_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: supplier_collections_set_input,
        "filter the rows which have to be updated"
        where: supplier_collections_bool_exp!
    ): supplier_collections_mutation_response
    "update data of the table: \"suppliers\""
    update_suppliers(
        "increments the integer columns with given value of the filtered values"
        _inc: suppliers_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: suppliers_set_input,
        "filter the rows which have to be updated"
        where: suppliers_bool_exp!
    ): suppliers_mutation_response
}

"query root"
type query_root {
    "fetch data from the table: \"supplier_collections\""
    supplier_collections(
        "distinct select on columns"
        distinct_on: [supplier_collections_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [supplier_collections_order_by!],
        "filter the rows returned"
        where: supplier_collections_bool_exp
    ): [supplier_collections!]!
    "fetch aggregated fields from the table: \"supplier_collections\""
    supplier_collections_aggregate(
        "distinct select on columns"
        distinct_on: [supplier_collections_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [supplier_collections_order_by!],
        "filter the rows returned"
        where: supplier_collections_bool_exp
    ): supplier_collections_aggregate!
    "fetch data from the table: \"supplier_collections\" using primary key columns"
    supplier_collections_by_pk(id: Int!): supplier_collections
    "fetch data from the table: \"suppliers\""
    suppliers(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): [suppliers!]!
    "fetch aggregated fields from the table: \"suppliers\""
    suppliers_aggregate(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): suppliers_aggregate!
    "fetch data from the table: \"suppliers\" using primary key columns"
    suppliers_by_pk(id: Int!): suppliers
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"supplier_collections\""
    supplier_collections(
        "distinct select on columns"
        distinct_on: [supplier_collections_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [supplier_collections_order_by!],
        "filter the rows returned"
        where: supplier_collections_bool_exp
    ): [supplier_collections!]!
    "fetch aggregated fields from the table: \"supplier_collections\""
    supplier_collections_aggregate(
        "distinct select on columns"
        distinct_on: [supplier_collections_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [supplier_collections_order_by!],
        "filter the rows returned"
        where: supplier_collections_bool_exp
    ): supplier_collections_aggregate!
    "fetch data from the table: \"supplier_collections\" using primary key columns"
    supplier_collections_by_pk(id: Int!): supplier_collections
    "fetch data from the table: \"suppliers\""
    suppliers(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): [suppliers!]!
    "fetch aggregated fields from the table: \"suppliers\""
    suppliers_aggregate(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): suppliers_aggregate!
    "fetch data from the table: \"suppliers\" using primary key columns"
    suppliers_by_pk(id: Int!): suppliers
}

"columns and relationships of \"supplier_collections\""
type supplier_collections {
    description: String!
    id: Int!
    "An array relationship"
    suppliers(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): [suppliers!]!
    "An aggregated array relationship"
    suppliers_aggregate(
        "distinct select on columns"
        distinct_on: [suppliers_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [suppliers_order_by!],
        "filter the rows returned"
        where: suppliers_bool_exp
    ): suppliers_aggregate!
    title: String!
}

"aggregated selection of \"supplier_collections\""
type supplier_collections_aggregate {
    aggregate: supplier_collections_aggregate_fields
    nodes: [supplier_collections!]!
}

"aggregate fields of \"supplier_collections\""
type supplier_collections_aggregate_fields {
    avg: supplier_collections_avg_fields
    count(columns: [supplier_collections_select_column!], distinct: Boolean): Int
    max: supplier_collections_max_fields
    min: supplier_collections_min_fields
    stddev: supplier_collections_stddev_fields
    stddev_pop: supplier_collections_stddev_pop_fields
    stddev_samp: supplier_collections_stddev_samp_fields
    sum: supplier_collections_sum_fields
    var_pop: supplier_collections_var_pop_fields
    var_samp: supplier_collections_var_samp_fields
    variance: supplier_collections_variance_fields
}

"aggregate avg on columns"
type supplier_collections_avg_fields {
    id: Float
}

"aggregate max on columns"
type supplier_collections_max_fields {
    description: String
    id: Int
    title: String
}

"aggregate min on columns"
type supplier_collections_min_fields {
    description: String
    id: Int
    title: String
}

"response of any mutation on the table \"supplier_collections\""
type supplier_collections_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [supplier_collections!]!
}

"aggregate stddev on columns"
type supplier_collections_stddev_fields {
    id: Float
}

"aggregate stddev_pop on columns"
type supplier_collections_stddev_pop_fields {
    id: Float
}

"aggregate stddev_samp on columns"
type supplier_collections_stddev_samp_fields {
    id: Float
}

"aggregate sum on columns"
type supplier_collections_sum_fields {
    id: Int
}

"aggregate var_pop on columns"
type supplier_collections_var_pop_fields {
    id: Float
}

"aggregate var_samp on columns"
type supplier_collections_var_samp_fields {
    id: Float
}

"aggregate variance on columns"
type supplier_collections_variance_fields {
    id: Float
}

"columns and relationships of \"suppliers\""
type suppliers {
    brand: String!
    collection: Int!
    description: String!
    id: Int!
    location: String
    "An object relationship"
    supplier_collection: supplier_collections!
    values: String
    year: Int!
}

"aggregated selection of \"suppliers\""
type suppliers_aggregate {
    aggregate: suppliers_aggregate_fields
    nodes: [suppliers!]!
}

"aggregate fields of \"suppliers\""
type suppliers_aggregate_fields {
    avg: suppliers_avg_fields
    count(columns: [suppliers_select_column!], distinct: Boolean): Int
    max: suppliers_max_fields
    min: suppliers_min_fields
    stddev: suppliers_stddev_fields
    stddev_pop: suppliers_stddev_pop_fields
    stddev_samp: suppliers_stddev_samp_fields
    sum: suppliers_sum_fields
    var_pop: suppliers_var_pop_fields
    var_samp: suppliers_var_samp_fields
    variance: suppliers_variance_fields
}

"aggregate avg on columns"
type suppliers_avg_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate max on columns"
type suppliers_max_fields {
    brand: String
    collection: Int
    description: String
    id: Int
    location: String
    values: String
    year: Int
}

"aggregate min on columns"
type suppliers_min_fields {
    brand: String
    collection: Int
    description: String
    id: Int
    location: String
    values: String
    year: Int
}

"response of any mutation on the table \"suppliers\""
type suppliers_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [suppliers!]!
}

"aggregate stddev on columns"
type suppliers_stddev_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate stddev_pop on columns"
type suppliers_stddev_pop_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate stddev_samp on columns"
type suppliers_stddev_samp_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate sum on columns"
type suppliers_sum_fields {
    collection: Int
    id: Int
    year: Int
}

"aggregate var_pop on columns"
type suppliers_var_pop_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate var_samp on columns"
type suppliers_var_samp_fields {
    collection: Float
    id: Float
    year: Float
}

"aggregate variance on columns"
type suppliers_variance_fields {
    collection: Float
    id: Float
    year: Float
}

"column ordering options"
enum order_by {
    "in the ascending order, nulls last"
    asc
    "in the ascending order, nulls first"
    asc_nulls_first
    "in the ascending order, nulls last"
    asc_nulls_last
    "in the descending order, nulls first"
    desc
    "in the descending order, nulls first"
    desc_nulls_first
    "in the descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"supplier_collections\""
enum supplier_collections_constraint {
    "unique or primary key constraint"
    supplier_collections_pkey
}

"select columns of table \"supplier_collections\""
enum supplier_collections_select_column {
    "column name"
    description
    "column name"
    id
    "column name"
    title
}

"update columns of table \"supplier_collections\""
enum supplier_collections_update_column {
    "column name"
    description
    "column name"
    id
    "column name"
    title
}

"unique or primary key constraints on table \"suppliers\""
enum suppliers_constraint {
    "unique or primary key constraint"
    suppliers_pkey
}

"select columns of table \"suppliers\""
enum suppliers_select_column {
    "column name"
    brand
    "column name"
    collection
    "column name"
    description
    "column name"
    id
    "column name"
    location
    "column name"
    values
    "column name"
    year
}

"update columns of table \"suppliers\""
enum suppliers_update_column {
    "column name"
    brand
    "column name"
    collection
    "column name"
    description
    "column name"
    id
    "column name"
    location
    "column name"
    values
    "column name"
    year
}

"expression to compare columns of type Int. All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"order by aggregate values of table \"supplier_collections\""
input supplier_collections_aggregate_order_by {
    avg: supplier_collections_avg_order_by
    count: order_by
    max: supplier_collections_max_order_by
    min: supplier_collections_min_order_by
    stddev: supplier_collections_stddev_order_by
    stddev_pop: supplier_collections_stddev_pop_order_by
    stddev_samp: supplier_collections_stddev_samp_order_by
    sum: supplier_collections_sum_order_by
    var_pop: supplier_collections_var_pop_order_by
    var_samp: supplier_collections_var_samp_order_by
    variance: supplier_collections_variance_order_by
}

"input type for inserting array relation for remote table \"supplier_collections\""
input supplier_collections_arr_rel_insert_input {
    data: [supplier_collections_insert_input!]!
    on_conflict: supplier_collections_on_conflict
}

"order by avg() on columns of table \"supplier_collections\""
input supplier_collections_avg_order_by {
    id: order_by
}

"Boolean expression to filter rows from the table \"supplier_collections\". All fields are combined with a logical 'AND'."
input supplier_collections_bool_exp {
    _and: [supplier_collections_bool_exp]
    _not: supplier_collections_bool_exp
    _or: [supplier_collections_bool_exp]
    description: String_comparison_exp
    id: Int_comparison_exp
    suppliers: suppliers_bool_exp
    title: String_comparison_exp
}

"input type for incrementing integer columne in table \"supplier_collections\""
input supplier_collections_inc_input {
    id: Int
}

"input type for inserting data into table \"supplier_collections\""
input supplier_collections_insert_input {
    description: String
    id: Int
    suppliers: suppliers_arr_rel_insert_input
    title: String
}

"order by max() on columns of table \"supplier_collections\""
input supplier_collections_max_order_by {
    description: order_by
    id: order_by
    title: order_by
}

"order by min() on columns of table \"supplier_collections\""
input supplier_collections_min_order_by {
    description: order_by
    id: order_by
    title: order_by
}

"input type for inserting object relation for remote table \"supplier_collections\""
input supplier_collections_obj_rel_insert_input {
    data: supplier_collections_insert_input!
    on_conflict: supplier_collections_on_conflict
}

"on conflict condition type for table \"supplier_collections\""
input supplier_collections_on_conflict {
    constraint: supplier_collections_constraint!
    update_columns: [supplier_collections_update_column!]!
    where: supplier_collections_bool_exp
}

"ordering options when selecting data from \"supplier_collections\""
input supplier_collections_order_by {
    description: order_by
    id: order_by
    suppliers_aggregate: suppliers_aggregate_order_by
    title: order_by
}

"input type for updating data in table \"supplier_collections\""
input supplier_collections_set_input {
    description: String
    id: Int
    title: String
}

"order by stddev() on columns of table \"supplier_collections\""
input supplier_collections_stddev_order_by {
    id: order_by
}

"order by stddev_pop() on columns of table \"supplier_collections\""
input supplier_collections_stddev_pop_order_by {
    id: order_by
}

"order by stddev_samp() on columns of table \"supplier_collections\""
input supplier_collections_stddev_samp_order_by {
    id: order_by
}

"order by sum() on columns of table \"supplier_collections\""
input supplier_collections_sum_order_by {
    id: order_by
}

"order by var_pop() on columns of table \"supplier_collections\""
input supplier_collections_var_pop_order_by {
    id: order_by
}

"order by var_samp() on columns of table \"supplier_collections\""
input supplier_collections_var_samp_order_by {
    id: order_by
}

"order by variance() on columns of table \"supplier_collections\""
input supplier_collections_variance_order_by {
    id: order_by
}

"order by aggregate values of table \"suppliers\""
input suppliers_aggregate_order_by {
    avg: suppliers_avg_order_by
    count: order_by
    max: suppliers_max_order_by
    min: suppliers_min_order_by
    stddev: suppliers_stddev_order_by
    stddev_pop: suppliers_stddev_pop_order_by
    stddev_samp: suppliers_stddev_samp_order_by
    sum: suppliers_sum_order_by
    var_pop: suppliers_var_pop_order_by
    var_samp: suppliers_var_samp_order_by
    variance: suppliers_variance_order_by
}

"input type for inserting array relation for remote table \"suppliers\""
input suppliers_arr_rel_insert_input {
    data: [suppliers_insert_input!]!
    on_conflict: suppliers_on_conflict
}

"order by avg() on columns of table \"suppliers\""
input suppliers_avg_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"Boolean expression to filter rows from the table \"suppliers\". All fields are combined with a logical 'AND'."
input suppliers_bool_exp {
    _and: [suppliers_bool_exp]
    _not: suppliers_bool_exp
    _or: [suppliers_bool_exp]
    brand: String_comparison_exp
    collection: Int_comparison_exp
    description: String_comparison_exp
    id: Int_comparison_exp
    location: String_comparison_exp
    supplier_collection: supplier_collections_bool_exp
    values: String_comparison_exp
    year: Int_comparison_exp
}

"input type for incrementing integer columne in table \"suppliers\""
input suppliers_inc_input {
    collection: Int
    id: Int
    year: Int
}

"input type for inserting data into table \"suppliers\""
input suppliers_insert_input {
    brand: String
    collection: Int
    description: String
    id: Int
    location: String
    supplier_collection: supplier_collections_obj_rel_insert_input
    values: String
    year: Int
}

"order by max() on columns of table \"suppliers\""
input suppliers_max_order_by {
    brand: order_by
    collection: order_by
    description: order_by
    id: order_by
    location: order_by
    values: order_by
    year: order_by
}

"order by min() on columns of table \"suppliers\""
input suppliers_min_order_by {
    brand: order_by
    collection: order_by
    description: order_by
    id: order_by
    location: order_by
    values: order_by
    year: order_by
}

"input type for inserting object relation for remote table \"suppliers\""
input suppliers_obj_rel_insert_input {
    data: suppliers_insert_input!
    on_conflict: suppliers_on_conflict
}

"on conflict condition type for table \"suppliers\""
input suppliers_on_conflict {
    constraint: suppliers_constraint!
    update_columns: [suppliers_update_column!]!
    where: suppliers_bool_exp
}

"ordering options when selecting data from \"suppliers\""
input suppliers_order_by {
    brand: order_by
    collection: order_by
    description: order_by
    id: order_by
    location: order_by
    supplier_collection: supplier_collections_order_by
    values: order_by
    year: order_by
}

"input type for updating data in table \"suppliers\""
input suppliers_set_input {
    brand: String
    collection: Int
    description: String
    id: Int
    location: String
    values: String
    year: Int
}

"order by stddev() on columns of table \"suppliers\""
input suppliers_stddev_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by stddev_pop() on columns of table \"suppliers\""
input suppliers_stddev_pop_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by stddev_samp() on columns of table \"suppliers\""
input suppliers_stddev_samp_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by sum() on columns of table \"suppliers\""
input suppliers_sum_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by var_pop() on columns of table \"suppliers\""
input suppliers_var_pop_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by var_samp() on columns of table \"suppliers\""
input suppliers_var_samp_order_by {
    collection: order_by
    id: order_by
    year: order_by
}

"order by variance() on columns of table \"suppliers\""
input suppliers_variance_order_by {
    collection: order_by
    id: order_by
    year: order_by
}